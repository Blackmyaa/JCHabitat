{% extends 'base.html.twig' %}

{% block title %}Contact - JC Habitat
{% endblock %}

{% block Javascript %}

	
{% endblock %}

{% block body %}
	<body class="d-flex flex-column min-vh-100">
	{% include "commun/nav.html.twig" %}
		<div class="container py-5">
			<h1 class="mb-4">Contactez-nous</h1>

			{% for message in app.flashes('success') %}
				<div class="alert alert-success">{{ message }}</div>
			{% endfor %}

			{{ form_start(form) }}
			<div class="mb-3">
				{{ form_label(form.nom) }}
				{{ form_widget(form.nom, {'attr': {'class': 'form-control'}
				})  }}
				<span id="nom-error" class="text-danger" style="display:none;">Le nom ne peut contenir que des lettres et le tiret (-).</span>
				<script>
					document.addEventListener("DOMContentLoaded", function () {
						const nomInput = document.getElementById("contact_nom");
						const errorMsg = document.getElementById("nom-error");

						if (nomInput) {
							nomInput.addEventListener("input", function () {
								const regex = /^[a-zA-Z√Ä-√ñ√ò-√∂√∏-√ø\s-]*$/;

								if (!regex.test(nomInput.value)) {
									// On efface le Caractere interdit
									nomInput.value = nomInput.value.replace(/[^a-zA-Z√Ä-√ñ√ò-√∂√∏-√ø\s-]/g, '');
									errorMsg.style.display = "block";
									nomInput.classList.add("is-invalid");
								} else {
									errorMsg.style.display = "none";
									nomInput.classList.remove("is-invalid");
								}
							});
						}
					});
				</script>
			</div>

			<div class="mb-3">
				{{ form_label(form.prenom) }}
				{{ form_widget(form.prenom, {'attr': {'class': 'form-control'}}) }}
				<span id="prenom-error" class="text-danger" style="display:none;">Le pr√©nom ne peut contenir que des lettres et le tiret (-).</span>
				<script>
					document.addEventListener("DOMContentLoaded", function () {
						const nomInput = document.getElementById("contact_prenom");
						const errorMsg = document.getElementById("prenom-error");

						if (nomInput) {
							nomInput.addEventListener("input", function () {
								const regex = /^[a-zA-Z√Ä-√ñ√ò-√∂√∏-√ø\s-]*$/;

								if (!regex.test(nomInput.value)) {
									// On efface le Caractere interdit
									nomInput.value = nomInput.value.replace(/[^a-zA-Z√Ä-√ñ√ò-√∂√∏-√ø\s-]/g, '');
									errorMsg.style.display = "block";
									nomInput.classList.add("is-invalid");
								} else {
									errorMsg.style.display = "none";
									nomInput.classList.remove("is-invalid");
								}
							});
						}
					});
				</script>
			</div>

			<div class="mb-3">
				{{ form_label(form.pays) }}
				{{ form_widget(form.pays, {'attr': {'class': 'form-control'}}) }}
			</div>
			
			<div class="mb-3">
				{{ form_label(form.telephone) }}
				{{ form_widget(form.telephone, {'attr': {'class': 'form-control', 'maxlength': '10'}}) }}

				<span id="tel-error" class="text-danger" style="display:none;">
					Le num√©ro doit contenir exactement 10 chiffres.
				</span>
				<script>
					document.addEventListener("DOMContentLoaded", function () {
						const telInput = document.getElementById("contact_telephone");
						const errorMsg = document.getElementById("tel-error");

						if (telInput) {
							telInput.addEventListener("input", function () {
								// Supprimer tous les caract√®res non num√©riques
								telInput.value = telInput.value.replace(/[^0-9]/g, '');

								// V√©rifier la longueur
								if (telInput.value.length > 10) {
									telInput.value = telInput.value.slice(0, 10);
								}

								// Afficher message si ce n'est pas 10 chiffres (mais seulement apr√®s qu'il ait fini de taper)
								if (telInput.value.length !== 10) {
									errorMsg.style.display = "block";
								} else {
									errorMsg.style.display = "none";
								}
							});
						}
					});
				</script>
			</div>


			<div class="mb-3">
				{{ form_label(form.email) }}
				{{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
				<span id="email-error" class="text-danger" style="display:none;">
					Veuillez entrer une adresse email valide (ex: exemple.nom@domaine.fr).
				</span>
				<script>
					document.addEventListener("DOMContentLoaded", function () {
						const emailInput = document.getElementById("contact_email");
						const errorMsg = document.getElementById("email-error");

						if (emailInput) {
							emailInput.addEventListener("input", function () {
								let value = emailInput.value.toLowerCase();

								// üîπ √âtape 1 : on supprime automatiquement les caract√®res interdits
								// Autoris√©s : lettres non accentu√©es, chiffres, ., -, @
								value = value.replace(/[^a-z0-9.@-]/g, '');

								// üîπ √âtape 2 : on valide le format global de l'email
								const regex = /^[a-z0-9][a-z0-9.-]*@[a-z0-9.-]+\.[a-z]{2,}$/;

								if (!regex.test(value)) {
									errorMsg.style.display = "block";
									emailInput.classList.add("is-invalid");
								} else {
									errorMsg.style.display = "none";
									emailInput.classList.remove("is-invalid");
								}

								// üîπ √âtape 3 : on remet la valeur nettoy√©e dans le champ
								emailInput.value = value;
							});
						}
					});
				</script>

			</div>


			<div class="mb-3">
				{{ form_label(form.message) }}
				{{ form_widget(form.message, {'attr': {'class': 'form-control', 'rows': 5}}) }}
				<small id="message-counter" class="text-muted">0 / 1000 caract√®res</small>
				<span id="message-error" class="text-danger" style="display:none;">
					Pas plus de 3 caract√®res/mots/nombres identiques √† la suite ni de collages r√©p√©titifs.
				</span>
				<script>
					document.addEventListener("DOMContentLoaded", function () {
						const messageInput = document.getElementById("contact_message");
						const counter = document.getElementById("message-counter");
						const errorMsg = document.getElementById("message-error");

						if (messageInput && counter) {
							messageInput.addEventListener("input", function () {
								const maxLength = 1000;
								let value = messageInput.value;

								let cleaned = value;

								// üîπ Limite les r√©p√©titions de +3 fois le m√™me caract√®re
								cleaned = cleaned.replace(/(.)\1{3,}/g, '$1$1$1');

								// üîπ Supprime les r√©p√©titions successives de mots
								cleaned = cleaned.replace(/\b(\w+)(\s+\1)+\b/gi, '$1 $1 $1');

								// üîπ Supprime les r√©p√©titions successives de blocs num√©riques avec espaces
								cleaned = cleaned.replace(/\b(\d+)(\s+\1{3,})+\b/g, '$1 $1 $1');

								// üîπ Supprime les r√©p√©titions directes de s√©quences num√©riques sans espace
								cleaned = cleaned.replace(/(\d{2,})(\1{3,})/g, '$1$1$1');

								if (value !== cleaned) {
									messageInput.value = cleaned;
									errorMsg.style.display = "block";
									setTimeout(() => errorMsg.style.display = "none", 5000);
								}

								const currentLength = messageInput.value.length;
								counter.textContent = currentLength + " / " + maxLength + " caract√®res";

								if (currentLength >= maxLength) {
									counter.classList.add("text-danger");
								} else {
									counter.classList.remove("text-danger");
								}
							});
						}
					});
				</script>
			</div>

			
			<button class="btn btn-primary">Envoyer</button>
			{{ form_end(form) }}
		</div>
            <a class="py-3 text-center" href="{{ path('app_accueil')}}"><button class="btn btn-dark">Retour √† l'accueil</button></a>
		{% include "commun/_footer.html.twig" %}
	</body>
{% endblock %}